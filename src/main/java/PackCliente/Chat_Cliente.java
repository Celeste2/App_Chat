/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PackCliente;

import PackCliente.Cliente;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Carlos B
 */
public class Chat_Cliente extends javax.swing.JFrame implements Runnable{
private static final Logger logger =Logger.getLogger(Chat_Cliente.class.getName());
    private Socket cSocket;
    private ServerSocket sSocket;
    ObjectInputStream entrada;
    ObjectOutputStream salida;
    
    public Chat_Cliente() {
        initComponents();
        String mensaje= JOptionPane.showInputDialog("Escribe tu nombre: ");
        lblNombre.setText(mensaje);
//        run();
        Thread hilo= new Thread(this);
        hilo.start();
    }

    Cliente cliente= new Cliente();
    public JTextArea getTxtAHistorial() {
        return txtAHistorial;
    }

    public void setTxtAHistorial(JTextArea txtAHistorial) {
        this.txtAHistorial = txtAHistorial;
    }

    public JLabel getLblNombre() {
        return lblNombre;
    }

    public void setLblNombre(JLabel lblNombre) {
        this.lblNombre = lblNombre;
    }

    

    public JTextField getTxtIP() {
        return txtIP;
    }

    public void setTxtIP(JTextField txtIP) {
        this.txtIP = txtIP;
    }

    public JTextField getTxtMensaje() {
        return txtMensaje;
    }

    public void setTxtMensaje(JTextField txtMensaje) {
        this.txtMensaje = txtMensaje;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        txtMensaje = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblContacto = new javax.swing.JLabel();
        lblIP = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAHistorial = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WASSAPO");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(16, 2, 23, 2);
        jPanel1.add(txtMensaje, gridBagConstraints);

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEnviar, new java.awt.GridBagConstraints());

        jPanel3.setBackground(new java.awt.Color(153, 204, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        lblContacto.setText("Mi nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 7, 0);
        jPanel3.add(lblContacto, gridBagConstraints);

        lblIP.setText("IP(destino):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.insets = new java.awt.Insets(7, 13, 7, 0);
        jPanel3.add(lblIP, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 10);
        jPanel3.add(txtIP, gridBagConstraints);

        lblNombre.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel3.add(lblNombre, gridBagConstraints);

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 205));
        jPanel2.setLayout(new java.awt.BorderLayout());

        txtAHistorial.setEditable(false);
        txtAHistorial.setColumns(20);
        txtAHistorial.setRows(5);
        jScrollPane1.setViewportView(txtAHistorial);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(416, 354));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        try {
            int mipuerto=2020;
            if (chequearsocket(mipuerto)){
                mipuerto=mipuerto+1;
            }
            sSocket= new ServerSocket(mipuerto);
             
            Cliente recibido;
            while(true){
                cSocket=sSocket.accept();
                entrada=new ObjectInputStream(cSocket.getInputStream());
                recibido=(Cliente) entrada.readObject();
                txtAHistorial.append("\n"+recibido.getNombre()+" : "+recibido.getMensaje()+"\n");
                entrada.close();
                close();
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        if(lblNombre.getText().isBlank() || lblNombre.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Debes escribir tu nombre", "ERROR FATAL", JOptionPane.ERROR_MESSAGE);
        }else if(txtIP.getText().isBlank() || txtIP.getText().isEmpty()){
          JOptionPane.showMessageDialog(null, "Debes escribir el IP de destino", "ERROR FATAL", JOptionPane.ERROR_MESSAGE);  
        }
        else{
        txtAHistorial.append("YO_MERO: "+txtMensaje.getText()+"\n");
        try {
            cSocket= new Socket("localhost", 1306);
            cliente.setNombre(lblNombre.getText());
            cliente.setIp(txtIP.getText());
            cliente.setMensaje(txtMensaje.getText());
            if(txtMensaje.getText().isEmpty()|| txtMensaje.getText().isBlank()){
                JOptionPane.showMessageDialog(null, "Escribe un mensaje para ser enviado", "ERROR FATAL", JOptionPane.ERROR_MESSAGE);
            }
            salida= new ObjectOutputStream(cSocket.getOutputStream());
            salida.writeObject(cliente);
            txtMensaje.removeAll();
            cSocket.close();
            salida.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void close() throws IOException{
  
        salida.close();
        cSocket.close();
        sSocket.close();
    }
    /**
     * @param args the command line arguments
     */
    public static boolean chequearsocket(int puerto){
    boolean isAlive=false;
    SocketAddress socketAddress=new InetSocketAddress("localhost",puerto);
    Socket socket=new Socket();
    int timeout=2000;
    logger.info("chequeando puerto ".concat(Integer.toString(puerto)));
    try {
        socket.connect(socketAddress,timeout);
        socket.close();
        isAlive=true;
        
    }
    catch (Exception ex){
     logger.info(ex.toString());
    }
    
    return isAlive;
}
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat_Cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContacto;
    private javax.swing.JLabel lblIP;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTextArea txtAHistorial;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtMensaje;
    // End of variables declaration//GEN-END:variables

    
}